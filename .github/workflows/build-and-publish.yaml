name: Build rust program and publish as GitHub release

on:
  workflow_call:
    inputs:
      skip-target:
        description: 'Targets that should not build against, as array of strings. By default all tier 1 and 2 rust targets will be built.'
        type: string
        default: "[]"
      target-regex:
        description: 'Only build targets matching such regex.'
        type: string
        default: "^([^-]+)-([^-]+)-([^-]+)(-([^-]+))?$"
      binary-name:
        description: 'Rust package name'
        required: true
        type: string
      test-reproducibility:
        description: 'Whether to check if binaries is reproducible and log it in release notes'
        type: boolean
        default: true

jobs:
  calculate-matrix:
    name: "Filter targets to build using regex"
    runs-on: ubuntu-latest
    env:
      TARGETS: |
        # Tier 1 with Host Tools
        aarch64-unknown-linux-gnu           # ARM64 Linux (kernel 4.1, glibc 2.17+)
        i686-pc-windows-gnu                 # 32-bit MinGW (Windows 10+, Windows Server 2016+, Pentium 4)
        i686-unknown-linux-gnu              # 32-bit Linux (kernel 3.2+, glibc 2.17+, Pentium 4)
        x86_64-pc-windows-gnu               # 64-bit MinGW (Windows 10+, Windows Server 2016+)
        x86_64-unknown-linux-gnu            # 64-bit Linux (kernel 3.2+, glibc 2.17+)
        # Tier 2 with Host Tools
        aarch64-unknown-linux-musl          # ARM64 Linux with musl 1.2.3
        arm-unknown-linux-gnueabi           # Armv6 Linux (kernel 3.2, glibc 2.17)
        arm-unknown-linux-gnueabihf         # Armv6 Linux, hardfloat (kernel 3.2, glibc 2.17)
        armv7-unknown-linux-gnueabihf       # Armv7-A Linux, hardfloat (kernel 3.2, glibc 2.17)
        loongarch64-unknown-linux-gnu       # LoongArch64 Linux, LP64D ABI (kernel 5.19, glibc 2.36)
        loongarch64-unknown-linux-musl      # LoongArch64 Linux, LP64D ABI (kernel 5.19, musl 1.2.5)
        powerpc-unknown-linux-gnu           # PowerPC Linux (kernel 3.2, glibc 2.17)
        powerpc64-unknown-linux-gnu         # PPC64 Linux (kernel 3.2, glibc 2.17)
        powerpc64le-unknown-linux-gnu       # PPC64LE Linux (kernel 3.10, glibc 2.17)
        riscv64gc-unknown-linux-gnu         # RISC-V Linux (kernel 4.20, glibc 2.29)
        s390x-unknown-linux-gnu             # S390x Linux (kernel 3.2, glibc 2.17)
        x86_64-unknown-freebsd              # 64-bit x86 FreeBSD
        x86_64-unknown-illumos              # illumos
        x86_64-unknown-linux-musl           # 64-bit Linux with musl 1.2.3
        x86_64-unknown-netbsd               # NetBSD/amd64
        # Tier 2 without Host Tools
        aarch64-linux-android               # ARM64 Android
        arm-linux-androideabi               # Armv6 Android
        arm-unknown-linux-musleabi          # Armv6 Linux with musl 1.2.3
        arm-unknown-linux-musleabihf        # Armv6 Linux with musl 1.2.3, hardfloat
        armv5te-unknown-linux-gnueabi       # Armv5TE Linux (kernel 4.4, glibc 2.23)
        armv5te-unknown-linux-musleabi      # Armv5TE Linux with musl 1.2.3
        armv7-linux-androideabi             # Armv7-A Android
        armv7-unknown-linux-gnueabi         # Armv7-A Linux (kernel 4.15, glibc 2.27)
        armv7-unknown-linux-musleabi        # Armv7-A Linux with musl 1.2.3
        armv7-unknown-linux-musleabihf      # Armv7-A Linux with musl 1.2.3, hardfloat
        i586-unknown-linux-gnu              # 32-bit Linux w/o SSE (kernel 3.2, glibc 2.17)
        i586-unknown-linux-musl             # 32-bit Linux w/o SSE, musl 1.2.3
        i686-linux-android                  # 32-bit x86 Android (Pentium 4 plus various extensions)
        i686-unknown-freebsd                # 32-bit x86 FreeBSD (Pentium 4)
        sparc64-unknown-linux-gnu           # SPARC Linux (kernel 4.4, glibc 2.23)
        sparcv9-sun-solaris                 # SPARC V9 Solaris 11.4
        thumbv7neon-linux-androideabi       # Thumb2-mode Armv7-A Android with NEON
        thumbv7neon-unknown-linux-gnueabihf # Thumb2-mode Armv7-A Linux with NEON (kernel 4.4, glibc 2.23)
        wasm32-unknown-emscripten           # WebAssembly via Emscripten
        x86_64-linux-android                # 64-bit x86 Android
        x86_64-pc-solaris                   # 64-bit x86 Solaris 11.4
    outputs:
      targets: ${{ steps.calculate.outputs.filtered_targets }}
    steps:
      - id: calculate
        name: "Filter targets"
        env:
          REGEX: "${{ inputs.target-regex }}"
        run: |
              filtered=""
              while read -r target; do
                # Trim comments
                target="${target%\#*}"
                # Trim whitespaces
                target="$(echo "$target" | xargs)"
                # Do not run on empty lines
                if [ "$target" == "" ]; then continue; fi
                if [[ "$target" =~ $REGEX ]]; then filtered="${filtered}${target};"; fi
              done <<< "$TARGETS"
              filtered="${filtered%\;}"
              echo "Following targets will be built: ${filtered}"
              echo -n "filtered_targets=" >> "$GITHUB_OUTPUT"
              echo -n "$filtered" | jq --raw-input --slurp --compact-output 'split(";")' >> "$GITHUB_OUTPUT"

  generate-changelog:
    name: "Generate changelog from Semantic Commits"
    runs-on: ubuntu-latest
    outputs:
      changelog: "${{ steps.cog.outputs.changelog }}"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: "Install rust toolchain"
        uses: dtolnay/rust-toolchain@stable
      - name: Cache cocogitto
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: cocogitto-cargo
      - name: "Install cocogitto"
        run:  cargo install cocogitto
      - name: "Generate release notes"
        id:   cog
        run: |
              changelog="$(cog changelog --template full_hash --at "$(git rev-list -n 1 "$(git describe --tags --abbrev=0)")" \
                || (echo "#### Commits"; git log --oneline \
                  "$(git describe --tags --abbrev=0 "$(git describe --tags --abbrev=0)"^)..$(git describe --tags --abbrev=0)"))"
              {
                echo "changelog<<EOF"
                echo "${changelog/EOF/}"
                echo EOF
              } >> "$GITHUB_OUTPUT"
              unset changelog

  publish-changelog:
    permissions:
      contents: write      # action-gh-release (write)
    name: "Create GitHub release and publish changelog"
    runs-on: ubuntu-latest
    needs: generate-changelog
    steps:
      - name: Create release
        uses: softprops/action-gh-release@master
        with:
          body: "${{ needs.generate-changelog.outputs.changelog }}"

  build-and-upload:
    permissions:
      contents: write      # attest-build-provenance (read), action-gh-release (write)
      id-token: write      # attest-build-provenance
      attestations: write  # attest-build-provenance
    name: "Compile and upload artifact"
    runs-on: ubuntu-latest
    needs: ["publish-changelog", "calculate-matrix"]
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.calculate-matrix.outputs.targets) }}
        exclude: ${{ fromJSON(inputs.skip-target) }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@master
      - name: "Install rust toolchain"
        uses: dtolnay/rust-toolchain@stable
      - name: "Cache cargo"
        uses: "actions/cache@v4"
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: "${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}"
          restore-keys: "${{ matrix.target }}-cargo-"
      - name: "Install cross-compilation tool"
        run:  cargo install cross --git "https://github.com/cross-rs/cross"
      - name: "Build for target ${{ matrix.target }}"
        if:   "${{ !inputs.test-reproducibility }}"
        env:
          TARGET: "${{ matrix.target }}"
          BINARY: "${{ inputs.binary-name }}"
        run: cross build --release "--target=$TARGET"
      - name: "Build for target ${{ matrix.target }} and check for reproducibility"
        if:   "${{ inputs.test-reproducibility }}"
        env:
          TARGET: "${{ matrix.target }}"
          BINARY: "${{ inputs.binary-name }}"
        run: |
              cross-util run "--target=$TARGET" -- \
                "sudo apt-get install --yes reprotest"
              if \
                cross-util run "--target=$TARGET" -- \
                "reprotest \"cargo build --release \\\"--target=$TARGET\\\" \\\"--package=$BINARY\\\"\" \
                \"targets/${TARGET}/release/${BINARY}\""\
              ; then
                echo "REPRODUCIBLE=true" >> "$GITHUB_ENV"
              else
                echo "REPRODUCIBLE=false" >> "$GITHUB_ENV"
              fi
      - name: "Generate reproducibility report"
        id:   reproducible-report
        env:
          TARGET: "${{ matrix.target }}"
          BINARY: "${{ inputs.binary-name }}"
        run: |
              if [ "$REPRODUCIBLE" == "true" ]; then
                echo "reproducible=✅  $BINARY is reproducible for $TARGET" >> "$GITHUB_OUTPUT"
              elif [ "$REPRODUCIBLE" == "false" ]; then
                echo "reproducible=❌  $BINARY is not reproducible for $TARGET" >> "$GITHUB_OUTPUT"
              fi
      - name: "Rename build artifact"
        env:
          TARGET: "${{ matrix.target }}"
          BINARY: "${{ inputs.binary-name }}"
        run:  mv "targets/${TARGET}/release/${BINARY}" "targets/${TARGET}/release/${BINARY}-${TARGET}"
      - name: "Generate build provenance attestation"
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "target/${{ matrix.target }}/release/${{ inputs.binary-name }}-${{ matrix.target }}"
      - name: "Upload binary as artifact"
        uses: softprops/action-gh-release@master
        with:
          files: "target/${{ matrix.target }}/release/${{ inputs.binary-name }}-${{ matrix.target }}"
          body: "${{ steps.reproducible-report.outputs.reproducible }}"
          append_body: true
